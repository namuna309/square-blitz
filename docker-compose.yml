services:
  backend:
    container_name: backend
    build:
      context: .
      dockerfile: Dockerfile.backend
    ports:
      - "3001:3001" # 호스트의 3001 포트를 컨테이너의 3001 포트로 매핑
    environment:
      NODE_ENV: production
    volumes:
      - ./backend:/app/backend
      - ./frontend/public:/app/frontend/public
    networks:
      - monitoring
    depends_on:
      update_env:
        condition: service_completed_successfully    # update_env 컨테이너 실행 후 실행
      
  update_env:
    container_name: update_env
    image: alpine:latest  # 경량 Alpine 이미지 사용
    volumes:
      - ./update_env.sh:/update_env.sh  # 스크립트 마운트
      - ./.env:/.env  # .env 파일을 업데이트하기 위해 마운트
    working_dir: /  # 실행 디렉토리 설정
    entrypoint: sh /update_env.sh  # update_env.sh 스크립트 실행
    networks:
      - monitoring
    depends_on:
      prometheus:
        condition: service_healthy  # prometheus가 준비된 후 실행


  prometheus:
    container_name: prometheus
    build:
      context: .
      dockerfile: Dockerfile.prometheus
    volumes:
      # - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus.yml.template:/etc/prometheus/prometheus.yml.template
    environment:
      - EC2_PRIVATE_IP=${EC2_PRIVATE_IP} # 환경변수 전달
    ports:
      - "9090:9090"
    entrypoint: >
      sh -c 'export CONTAINER_IP=$(hostname -i) && envsubst < /etc/prometheus/prometheus.yml.template > /etc/prometheus/prometheus.yml && prometheus --config.file=/etc/prometheus/prometheus.yml'
    networks:
      - monitoring
    healthcheck:
      test: ["CMD", "wget", "http://localhost:9090"]
      interval: 10s
      timeout: 15s
      retries: 10
      start_period: 40s

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-storage:/var/lib/grafana
    networks:
      - monitoring


volumes:
  grafana-storage: {}

networks:
  monitoring:
    driver: bridge